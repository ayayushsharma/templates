// ---------------- H E S I T A T I O N   I S   D E F E A T ----------------
#include <bits/stdc++.h>
using namespace std;

#define int long long
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef vector<pii> vpii;
typedef map<int, int> mapi;
typedef set<int> seti;
typedef stack<int> stacki;

#define fast_io ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define endl "\n"
#define loop(i, a, b) for (int i = (int)a; i < (int)b; i++)
#define rloop(i, a, b) for (int i = (int)a; i >= (int)b; i--)
#define max(a, b) (((a) > (b)) ? (a) : (b))
#define min(a, b) (((a) < (b)) ? (a) : (b))
#define abs(a) ((a) > 0 ? (a) : -1 * (a))
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define TemTyp template <typename
#define Typ typename
#define space " "

#if defined(ONLINE_JUDGE) || !defined(LOCAL)
#define echo(...) "";
#define TESTCASE "";
#else
#define echo(...) __debug_print(#__VA_ARGS__, __VA_ARGS__)
#define TESTCASE cout << "case " << i << ": " << endl;
#endif

// DEBUG //
TemTyp T > void __deb(std::istringstream &ss, T arg);
TemTyp... T > void __debug_print(const char *n, T &&...args);
// DEBUG //
TemTyp T > void take(vector<T> &s, int n);
TemTyp T > void print(vector<T> &s, string e = "\n");
int gcd(int a, int b);
string binary(int n);

const int INF = 1e18;
const int MOD = 1e9 + 7;
int expo(int a, int b, int m = MOD);

void solve(int testcase) {
  int n;
  cin >> n;
  //
}

int32_t main() {
  fast_io;
  int t = 1;
  cin >> t;
  loop(i, 1, t + 1) {
    TESTCASE;
    solve(i);
    cout << endl;
  }
  return 0;
}

TemTyp T > void take(vector<T> &s, int n) {
  s.resize(n);
  for (auto &it : s) cin >> it;
}
TemTyp T > void print(vector<T> &s, string e) {
  for (auto x : s) cout << x << " ";
  cout << e;
}
int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }
/////////////////////////DEBUG///////////////////////////
namespace debugging {
TemTyp T > void _print(T c) { cout << c; }
TemTyp T, Typ V > void _print(pair<T, V> c) {
  cout << "{";
  debugging::_print(c.first);
  cout << ",";
  debugging::_print(c.second);
  cout << "}";
}
TemTyp T > void _print(vector<T> c) {
  cout << "{";
  loop(i, 0, c.size() - 1) {
    debugging::_print(c[i]);
    cout << ", ";
  }
  debugging::_print(*--c.end());
  cout << "}";
}
TemTyp T > void _print(vector<vector<T>> c) {
  cout << "\n{\n";
  loop(i, 0, c.size() - 1) {
    cout << "\t";
    debugging::_print(c[i]);
    cout << "," << endl;
  }
  cout << "\t";
  debugging::_print(*--c.end());
  cout << "\n}\n";
}
TemTyp T > void _print(set<T> c) {
  cout << "{";
  for (auto x : c) {
    debugging::_print(x);
    cout << ", ";
  }
  cout << "}";
}

TemTyp T, Typ V > void _print(map<T, V> c) {
  cout << endl;
  for (auto x : c) {
    cout << "\t";
    debugging::_print(x.first);
    cout << "  ";
    debugging::_print(x.second);
    cout << endl;
  }
}
}  // namespace debugging
TemTyp T > void __deb(istringstream &ss, T arg) {
  string n;
  getline(ss, n, ',');
  const auto pos(n.find_first_not_of(" "));
  n.erase(0, pos);
  cout << "[" << n << ": ";
  debugging::_print(arg);
  cout << "] ";
}
TemTyp... T > void __debug_print(const char *n, T &&...args) {
  istringstream ss(n);
  (__deb(ss, args), ...);
}
/////////////////////////DEBUG///////////////////////////
string binary(int a) {
  if (a == 0) return "0";
  string s = bitset<sizeof a * 8>(a).to_string();
  return s.substr(s.find('1'));
}
int number(string s) {
  reverse(s.begin(), s.end());
  int a = 0, e = 1;
  for (char x : s) {
    if (x - '0') a += e;
    e <<= 1;
  }
  return a;
}
int expo(int a, int b, int m) {
  a %= m;
  int res = 1;
  while (b > 0) {
    if (b & 1) res = res * a % m;
    a = a * a % m;
    b >>= 1;
  }
  return res;
}